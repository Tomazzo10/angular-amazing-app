"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const architect_1 = require("@angular-devkit/architect");
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const find_up_1 = require("find-up");
// eslint-disable-next-line import/no-extraneous-dependencies
const standalone_1 = __importDefault(require("@storybook/angular/standalone"));
const run_compodoc_1 = require("../utils/run-compodoc");
const build_standalone_errors_handler_1 = require("../utils/build-standalone-errors-handler");
exports.default = architect_1.createBuilder(commandBuilder);
function commandBuilder(options, context) {
    return rxjs_1.from(setup(options, context)).pipe(operators_1.switchMap(({ tsConfig }) => {
        const runCompodoc$ = options.compodoc
            ? run_compodoc_1.runCompodoc({ compodocArgs: options.compodocArgs, tsconfig: tsConfig }, context).pipe(operators_1.mapTo({ tsConfig }))
            : rxjs_1.of({});
        return runCompodoc$.pipe(operators_1.mapTo({ tsConfig }));
    }), operators_1.map(({ tsConfig }) => {
        const { browserTarget, stylePreprocessorOptions, styles, configDir, docs, loglevel, outputDir, quiet, webpackStatsJson, } = options;
        const standaloneOptions = {
            configDir,
            docs,
            loglevel,
            outputDir,
            quiet,
            angularBrowserTarget: browserTarget,
            angularBuilderContext: context,
            angularBuilderOptions: Object.assign(Object.assign({}, (stylePreprocessorOptions ? { stylePreprocessorOptions } : {})), (styles ? { styles } : {})),
            tsConfig,
            webpackStatsJson,
        };
        return standaloneOptions;
    }), operators_1.switchMap((standaloneOptions) => runInstance(Object.assign(Object.assign({}, standaloneOptions), { mode: 'static' }))), operators_1.map(() => {
        return { success: true };
    }));
}
function setup(options, context) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        let browserOptions;
        let browserTarget;
        if (options.browserTarget) {
            browserTarget = architect_1.targetFromTargetString(options.browserTarget);
            browserOptions = yield context.validateOptions(yield context.getTargetOptions(browserTarget), yield context.getBuilderNameForTarget(browserTarget));
        }
        return {
            tsConfig: (_b = (_a = options.tsConfig) !== null && _a !== void 0 ? _a : find_up_1.sync('tsconfig.json', { cwd: options.configDir })) !== null && _b !== void 0 ? _b : browserOptions.tsConfig,
        };
    });
}
function runInstance(options) {
    return rxjs_1.from(standalone_1.default(options)).pipe(operators_1.catchError((error) => rxjs_1.throwError(build_standalone_errors_handler_1.buildStandaloneErrorHandler(error))));
}
