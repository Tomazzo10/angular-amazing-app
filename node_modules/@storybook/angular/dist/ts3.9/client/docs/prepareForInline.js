"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prepareForInline = void 0;
const react_1 = __importDefault(require("react"));
const p_limit_1 = __importDefault(require("p-limit"));
const nanoid_1 = require("nanoid");
const renderer_1 = require("../../renderer");
const limit = p_limit_1.default(1);
/**
 * Uses the angular renderer to generate a story. Uses p-limit to run synchronously
 */
exports.prepareForInline = (storyFn, { id, parameters, component }) => {
    const el = react_1.default.useRef();
    react_1.default.useEffect(() => {
        (() => __awaiter(void 0, void 0, void 0, function* () {
            limit(() => __awaiter(void 0, void 0, void 0, function* () {
                const renderer = yield renderer_1.rendererFactory.getRendererInstance(`${id}-${nanoid_1.nanoid(10)}`.toLowerCase(), el.current);
                if (renderer) {
                    yield renderer.render({
                        forced: false,
                        component,
                        parameters,
                        storyFnAngular: storyFn(),
                        targetDOMNode: el.current,
                    });
                }
            }));
        }))();
    });
    return react_1.default.createElement('div', {
        ref: el,
    });
};
