"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.clearRootHTMLElement = exports.getRenderType = exports.RendererFactory = void 0;
const AbstractRenderer_1 = require("./AbstractRenderer");
const DocsRenderer_1 = require("./DocsRenderer");
const CanvasRenderer_1 = require("./CanvasRenderer");
class RendererFactory {
    constructor() {
        this.rendererMap = new Map();
    }
    getRendererInstance(storyId, targetDOMNode) {
        return __awaiter(this, void 0, void 0, function* () {
            // do nothing if the target node is null
            // fix a problem when the docs asks 2 times the same component at the same time
            // the 1st targetDOMNode of the 1st requested rendering becomes null 🤷‍♂️
            if (targetDOMNode === null) {
                return null;
            }
            const renderType = exports.getRenderType(targetDOMNode);
            // keep only instances of the same type
            if (this.lastRenderType && this.lastRenderType !== renderType) {
                yield AbstractRenderer_1.AbstractRenderer.resetPlatformBrowserDynamic();
                clearRootHTMLElement(renderType);
                this.rendererMap.clear();
            }
            if (!this.rendererMap.has(storyId)) {
                this.rendererMap.set(storyId, this.buildRenderer(storyId, renderType));
            }
            this.lastRenderType = renderType;
            return this.rendererMap.get(storyId);
        });
    }
    buildRenderer(storyId, renderType) {
        if (renderType === 'docs') {
            return new DocsRenderer_1.DocsRenderer(storyId);
        }
        return new CanvasRenderer_1.CanvasRenderer(storyId);
    }
}
exports.RendererFactory = RendererFactory;
exports.getRenderType = (targetDOMNode) => {
    return targetDOMNode.id === 'root' ? 'canvas' : 'docs';
};
function clearRootHTMLElement(renderType) {
    switch (renderType) {
        case 'canvas':
            global.document.getElementById('docs-root').innerHTML = '';
            break;
        case 'docs':
            global.document.getElementById('root').innerHTML = '';
            break;
        default:
            break;
    }
}
exports.clearRootHTMLElement = clearRootHTMLElement;
