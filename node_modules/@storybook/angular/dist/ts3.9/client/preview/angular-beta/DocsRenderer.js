"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DocsRenderer = void 0;
const addons_1 = require("@storybook/addons");
const core_events_1 = __importDefault(require("@storybook/core-events"));
const AbstractRenderer_1 = require("./AbstractRenderer");
class DocsRenderer extends AbstractRenderer_1.AbstractRenderer {
    render(options) {
        const _super = Object.create(null, {
            render: { get: () => super.render }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const channel = addons_1.addons.getChannel();
            /**
             * Destroy and recreate the PlatformBrowserDynamic of angular
             * For several stories to be rendered in the same docs we should
             * not destroy angular between each rendering but do it when the
             * rendered stories are not needed anymore.
             *
             * Note for improvement: currently there is one event per story
             * rendered in the doc. But one event could be enough for the whole docs
             *
             */
            channel.once(core_events_1.default.STORY_CHANGED, () => __awaiter(this, void 0, void 0, function* () {
                yield DocsRenderer.resetPlatformBrowserDynamic();
            }));
            /**
             * Destroy and recreate the PlatformBrowserDynamic of angular
             * when doc re render. Allows to call ngOnDestroy of angular
             * for previous component
             */
            channel.once(core_events_1.default.DOCS_RENDERED, () => __awaiter(this, void 0, void 0, function* () {
                yield DocsRenderer.resetPlatformBrowserDynamic();
            }));
            yield _super.render.call(this, Object.assign(Object.assign({}, options), { forced: false }));
        });
    }
    beforeFullRender() {
        return __awaiter(this, void 0, void 0, function* () { });
    }
    afterFullRender() {
        return __awaiter(this, void 0, void 0, function* () {
            yield AbstractRenderer_1.AbstractRenderer.resetCompiledComponents();
        });
    }
}
exports.DocsRenderer = DocsRenderer;
