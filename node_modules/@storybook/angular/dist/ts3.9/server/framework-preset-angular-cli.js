"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.webpackFinal = void 0;
const node_logger_1 = require("@storybook/node-logger");
const architect_1 = require("@angular-devkit/architect");
const find_up_1 = require("find-up");
const semver_1 = __importDefault(require("@storybook/semver"));
const ts_dedent_1 = __importDefault(require("ts-dedent"));
const core_1 = require("@angular-devkit/core");
const module_is_available_1 = require("./utils/module-is-available");
const angular_cli_webpack_12_2_x_1 = require("./angular-cli-webpack-12.2.x");
const angular_cli_webpack_13_x_x_1 = require("./angular-cli-webpack-13.x.x");
const angular_cli_webpack_older_1 = require("./angular-cli-webpack-older");
const angular_read_workspace_1 = require("./angular-read-workspace");
function webpackFinal(baseConfig, options) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!module_is_available_1.moduleIsAvailable('@angular-devkit/build-angular')) {
            node_logger_1.logger.info('=> Using base config because "@angular-devkit/build-angular" is not installed');
            return baseConfig;
        }
        const angularCliVersion = yield Promise.resolve().then(() => __importStar(require('@angular/cli'))).then((m) => semver_1.default.coerce(m.VERSION.full));
        /**
         * Ordered array to use the specific  getWebpackConfig according to some condition like angular-cli version
         */
        const webpackGetterByVersions = [
            {
                info: '=> Loading angular-cli config for angular >= 13.0.0',
                condition: semver_1.default.satisfies(angularCliVersion, '>=13.0.0'),
                getWebpackConfig: (_baseConfig, _options) => __awaiter(this, void 0, void 0, function* () {
                    const builderContext = getBuilderContext(_options);
                    const builderOptions = yield getBuilderOptions(_options, builderContext);
                    const legacyDefaultOptions = yield getLegacyDefaultBuildOptions(_options);
                    return angular_cli_webpack_13_x_x_1.getWebpackConfig(_baseConfig, {
                        builderOptions: Object.assign(Object.assign({ watch: options.configType === 'DEVELOPMENT' }, legacyDefaultOptions), builderOptions),
                        builderContext,
                    });
                }),
            },
            {
                info: '=> Loading angular-cli config for angular 12.2.x',
                condition: semver_1.default.satisfies(angularCliVersion, '12.2.x') && options.angularBuilderContext,
                getWebpackConfig: (_baseConfig, _options) => __awaiter(this, void 0, void 0, function* () {
                    const builderContext = getBuilderContext(_options);
                    const builderOptions = yield getBuilderOptions(_options, builderContext);
                    return angular_cli_webpack_12_2_x_1.getWebpackConfig(_baseConfig, {
                        builderOptions,
                        builderContext,
                    });
                }),
            },
            {
                info: '=> Loading angular-cli config for angular lower than 12.2.0',
                condition: true,
                getWebpackConfig: angular_cli_webpack_older_1.getWebpackConfig,
            },
        ];
        const webpackGetter = webpackGetterByVersions.find((wg) => wg.condition);
        node_logger_1.logger.info(webpackGetter.info);
        return Promise.resolve(webpackGetter.getWebpackConfig(baseConfig, options));
    });
}
exports.webpackFinal = webpackFinal;
/**
 * Get Builder Context
 * If storybook is not start by angular builder create dumb BuilderContext
 */
function getBuilderContext(options) {
    var _a;
    return ((_a = options.angularBuilderContext) !== null && _a !== void 0 ? _a : {
        target: { project: 'noop-project', builder: '', options: {} },
        workspaceRoot: process.cwd(),
        getProjectMetadata: () => ({}),
        getTargetOptions: () => ({}),
        logger: new core_1.logging.Logger('Storybook'),
    });
}
/**
 * Get builder options
 * Merge target options from browser target and from storybook options
 */
function getBuilderOptions(options, builderContext) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        /**
         * Get Browser Target options
         */
        let browserTargetOptions = {};
        if (options.angularBrowserTarget) {
            const browserTarget = architect_1.targetFromTargetString(options.angularBrowserTarget);
            node_logger_1.logger.info(`=> Using angular browser target options from "${browserTarget.project}:${browserTarget.target}${browserTarget.configuration ? `:${browserTarget.configuration}` : ''}"`);
            browserTargetOptions = yield builderContext.getTargetOptions(browserTarget);
        }
        /**
         * Merge target options from browser target options and from storybook options
         */
        const builderOptions = Object.assign(Object.assign(Object.assign({}, browserTargetOptions), options.angularBuilderOptions), { tsConfig: (_b = (_a = options.tsConfig) !== null && _a !== void 0 ? _a : find_up_1.sync('tsconfig.json', { cwd: options.configDir })) !== null && _b !== void 0 ? _b : browserTargetOptions.tsConfig });
        node_logger_1.logger.info(`=> Using angular project with "tsConfig:${builderOptions.tsConfig}"`);
        return builderOptions;
    });
}
/**
 * Get options from legacy way
 * /!\ This is only for backward compatibility and would be removed on Storybook 7.0
 * only work for angular.json with [defaultProject].build or "storybook.build" config
 */
function getLegacyDefaultBuildOptions(options) {
    return __awaiter(this, void 0, void 0, function* () {
        if (options.angularBrowserTarget !== undefined) {
            // Not use legacy way with builder (`angularBrowserTarget` is defined or null with builder and undefined without)
            return {};
        }
        node_logger_1.logger.warn(ts_dedent_1.default `Your Storybook startup uses a solution that will not be supported in version 7.0. 
            You must use angular builder to have an explicit configuration on the project used in angular.json
            Read more at:
            - https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#sb-angular-builder)
            - https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#angular13)
          `);
        const dirToSearch = process.cwd();
        // Read angular workspace
        let workspaceConfig;
        try {
            workspaceConfig = yield angular_read_workspace_1.readAngularWorkspaceConfig(dirToSearch);
        }
        catch (error) {
            node_logger_1.logger.error(`=> Could not find angular workspace config (angular.json) on this path "${dirToSearch}"`);
            node_logger_1.logger.info(`=> Fail to load angular-cli config. Using base config`);
            return {};
        }
        // Find angular project target
        try {
            const browserTarget = {
                configuration: undefined,
                project: angular_read_workspace_1.getDefaultProjectName(workspaceConfig),
                target: 'build',
            };
            const { target, project } = angular_read_workspace_1.findAngularProjectTarget(workspaceConfig, browserTarget.project, browserTarget.target);
            node_logger_1.logger.info(`=> Using angular project "${browserTarget.project}:${browserTarget.target}" for configuring Storybook`);
            return Object.assign({}, target.options);
        }
        catch (error) {
            node_logger_1.logger.error(`=> Could not find angular project: ${error.message}`);
            node_logger_1.logger.info(`=> Fail to load angular-cli config. Using base config`);
            return {};
        }
    });
}
