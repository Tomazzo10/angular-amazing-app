"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.webpack = exports.runNgcc = void 0;
const path = __importStar(require("path"));
/**
 * Source : https://github.com/angular/angular-cli/blob/ebccb5de4a455af813c5e82483db6af20666bdbd/packages/angular_devkit/build_angular/src/utils/load-esm.ts#L23
 * This uses a dynamic import to load a module which may be ESM.
 * CommonJS code can load ESM code via a dynamic import. Unfortunately, TypeScript
 * will currently, unconditionally downlevel dynamic import into a require call.
 * require calls cannot load ESM code and will result in a runtime error. To workaround
 * this, a Function constructor is used to prevent TypeScript from changing the dynamic import.
 * Once TypeScript provides support for keeping the dynamic import this workaround can
 * be dropped.
 *
 * @param modulePath The path of the module to load.
 * @returns A Promise that resolves to the dynamically imported module.
 */
function loadEsmModule(modulePath) {
    // eslint-disable-next-line no-new-func
    return new Function('modulePath', `return import(modulePath);`)(modulePath);
}
/**
 * Run ngcc for converting modules to ivy format before starting storybook
 * This step is needed in order to support Ivy in storybook
 *
 * Information about Ivy can be found here https://angular.io/guide/ivy
 */
exports.runNgcc = () => __awaiter(void 0, void 0, void 0, function* () {
    let ngcc;
    try {
        ngcc = yield Promise.resolve().then(() => __importStar(require('@angular/compiler-cli/ngcc')));
    }
    catch (error) {
        ngcc = yield loadEsmModule('@angular/compiler-cli/ngcc');
    }
    ngcc.process({
        // should be async: true but does not work due to
        // https://github.com/storybookjs/storybook/pull/11157/files#r615413803
        async: false,
        basePath: path.join(process.cwd(), 'node_modules'),
        createNewEntryPointFormats: true,
        compileAllFormats: false,
    });
});
exports.webpack = (webpackConfig, options) => __awaiter(void 0, void 0, void 0, function* () {
    const angularOptions = yield options.presets.apply('angularOptions', {}, options);
    // Default to true, if undefined
    if (angularOptions.enableIvy === false) {
        return webpackConfig;
    }
    exports.runNgcc();
    return Object.assign(Object.assign({}, webpackConfig), { resolve: Object.assign(Object.assign({}, webpackConfig.resolve), { mainFields: [
                'es2015_ivy_ngcc',
                'module_ivy_ngcc',
                'main_ivy_ngcc',
                'es2015',
                'browser',
                'module',
                'main',
            ] }) });
});
