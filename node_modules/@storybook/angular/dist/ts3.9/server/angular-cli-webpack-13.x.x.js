var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
// Private angular devkit stuff
const { generateI18nBrowserWebpackConfigFromContext, } = require('@angular-devkit/build-angular/src/utils/webpack-browser-config');
const { getCommonConfig, getStylesConfig, getDevServerConfig, getTypeScriptConfig, } = require('@angular-devkit/build-angular/src/webpack/configs');
const TsconfigPathsPlugin = require('tsconfig-paths-webpack-plugin');
const { filterOutStylingRules } = require('./utils/filter-out-styling-rules');
/**
 * Extract webpack config from angular-cli 13.x.x
 * ⚠️ This file is in JavaScript to not use TypeScript. Because current storybook TypeScript version is not compatible with Angular CLI.
 * FIXME: Try another way with TypeScript on future storybook version (7 maybe 🤞)
 *
 * @param {*} baseConfig Previous webpack config from storybook
 * @param {*} options { builderOptions, builderContext }
 */
exports.getWebpackConfig = (baseConfig, { builderOptions, builderContext }) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c;
    /**
     * Get angular-cli Webpack config
     */
    const { config: cliConfig } = yield generateI18nBrowserWebpackConfigFromContext(Object.assign(Object.assign({ 
        // Default options
        index: 'noop-index', main: 'noop-main', outputPath: 'noop-out' }, builderOptions), { 
        // Fixed options
        optimization: false, namedChunks: false, progress: false, buildOptimizer: false, aot: false }), builderContext, (wco) => [
        getCommonConfig(wco),
        getStylesConfig(wco),
        getTypeScriptConfig ? getTypeScriptConfig(wco) : getDevServerConfig(wco),
    ]);
    /**
     * Merge baseConfig Webpack with angular-cli Webpack
     */
    const entry = [
        ...baseConfig.entry,
        ...((_a = cliConfig.entry.styles) !== null && _a !== void 0 ? _a : []),
        ...((_b = cliConfig.entry.polyfills) !== null && _b !== void 0 ? _b : []),
    ];
    // Don't use storybooks styling rules because we have to use rules created by @angular-devkit/build-angular
    // because @angular-devkit/build-angular created rules have include/exclude for global style files.
    const rulesExcludingStyles = filterOutStylingRules(baseConfig);
    const module = Object.assign(Object.assign({}, baseConfig.module), { rules: [...cliConfig.module.rules, ...rulesExcludingStyles] });
    const plugins = [...((_c = cliConfig.plugins) !== null && _c !== void 0 ? _c : []), ...baseConfig.plugins];
    const resolve = Object.assign(Object.assign({}, baseConfig.resolve), { modules: Array.from(new Set([...baseConfig.resolve.modules, ...cliConfig.resolve.modules])), plugins: [
            new TsconfigPathsPlugin({
                configFile: builderOptions.tsConfig,
                mainFields: ['browser', 'module', 'main'],
            }),
        ] });
    return Object.assign(Object.assign({}, baseConfig), { entry,
        module,
        plugins,
        resolve, resolveLoader: cliConfig.resolveLoader });
});
